@startuml
'https://plantuml.com/class-diagram

class CreateOneApartmentsCommandsHandler {
    - IApartmentRepository _apartmentRepository
    - IHouseRepository _houseRepository
    - IOwnerRepository _ownerRepository
    - IMapper _mapper
    --
    + Handle(request: CreateOneApartmentsCommandsRequest, cancellationToken: CancellationToken)
}

StreetRepository --|> IStreetRepository
IStreetRepository --|> IRepositoryBase

interface IStreetRepository {
    + Task<Street> FindFirstOrDefaultWithHousesAsync(match: Expression<Func<Street, bool>>)
}

class StreetRepository {
}

ApartmentRepository --|> IApartmentRepository
IApartmentRepository --|> IRepositoryBase

interface IApartmentRepository {
    + Task<Apartment> FindFirstOrDefaultWithOwnersAsync(match: Expression<Func<Apartment, bool>>)
}

class ApartmentRepository {
}

OwnerRepository --|> IOwnerRepository
IOwnerRepository --|> IRepositoryBase

interface IOwnerRepository {
}

class OwnerRepository {
}

HouseRepository --|> IHouseRepository
IHouseRepository --|> IRepositoryBase

interface IHouseRepository {
    + Task<House> FindFirstOrDefaultWithApartmentsAsync(match: Expression<Func<House, bool>>)
}

class HouseRepository {
}

RepositoryBase --|> IRepositoryBase

interface IRepositoryBase<<TEntity>> {
    + IQueryable<TEntity> AsQueryable()
        + Task<TEntity?> FindFirstOrDefaultAsync(match: Expression<Func<TEntity, bool>>)
        + Task<bool> ExistsAsync(match: Expression<Func<TEntity, bool>>)
        + Task InsertAsync(entity: TEntity)
        + Task<TEntity> UpdateAsync(entityToUpdate: TEntity)
        + Task<List<TEntity>> FindAllAsync(match: Expression<Func<TEntity, bool>>)
        + Task DeleteAsync(entity: TEntity)
        + Task DeleteRangeAsync(entity: IEnumerable<TEntity>)
}

class RepositoryBase<<TEntity>> {
    - ApplicationDbContext _context
    # DbSet<TEntity> DbSet
}

@enduml